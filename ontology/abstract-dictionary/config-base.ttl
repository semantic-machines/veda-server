@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

@prefix cfgb: <http://semantic-machines.com/veda/config-base/> .
<http://semantic-machines.com/veda/config-base>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология Веда. Обработчики событий"@ru ;
  rdfs:label "Veda ontology. Event handlers"@en ;
#  owl:versionInfo "1.0" ;
  v-s:loadPriority 3;
.

cfg:Event_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  v-s:preventByType v-s:Version;
  v-s:preventByType v-s:Group;
  v-s:preventByType v-s:Connection;
  v-s:preventByType v-s:Credential;
  v-s:preventByType v-s:Event;
  v-s:preventByType v-s:Account;
  v-s:preventByType v-s:Person;
  v-s:preventByType v-s:Position;
  v-s:preventByType v-s:Appointment;
  v-s:preventByType v-s:Department;
  v-s:preventByType v-s:Organization;
  v-s:preventByType v-s:OrgGroup;
  v-s:preventByType v-s:OrganizationUnit;
  rdfs:label "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  rdfs:comment "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
// First class event
if (parent_script_id) return;

const doc_uri = document['@'];
const isDefinedBy = document['rdfs:isDefinedBy'];
if ( !isDefinedBy ) return;
const uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + 'cfg_TTLResourcesGroup';
const membership = {
  '@': uri,
  'rdf:type': veda.Util.newUri('v-s:Membership'),
  'v-s:memberOf': veda.Util.newUri('cfg:TTLResourcesGroup'),
  'v-s:resource': veda.Util.newUri(doc_uri),
  'rdfs:comment': veda.Util.newStr('создано автоматически в обработчике cfg:Event_1'),
};
put_individual(ticket, membership, _event_id);
  """ ;
.

cfg:Event_2
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  rdfs:comment "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  v-s:preventByType v-s:Version;
  v-s:preventByType v-s:Account;
  v-s:preventByType v-s:Personal;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
if (parent_script_id) return;

const doc_uri = document['@'];
const owner_properties = ['v-s:owner', 'v-s:author', 'v-s:publisher', 'v-s:creator'];

owner_properties.map(function (property_uri) {
  if (document[property_uri]) {
    document[property_uri].map(function (value) {
      const owner_uri = value.data;
      if (owner_uri && owner_uri !== 'cfg:VedaSystem') {
        const owner = get_individual(ticket, owner_uri);
        if (owner) {
          const owner_type = veda.Util.getUri(owner['rdf:type']);
          if (owner_type === 'v-s:Person' || owner_type === 'v-s:Position') {
            const permission_uri = 'd:right_' + doc_uri.split(':').join('_') + '_' + owner_uri.split(':').join('_') + '_event2';
            addPermission(permission_uri, owner_uri, doc_uri, ['v-s:canRead', 'v-s:canUpdate', 'v-s:canDelete']);
          } else if (owner_type === 'v-s:Appointment') {
            const position_uri = veda.Util.getUri(owner['v-s:occupation']);
            if (position_uri) {
              const permission_uri = 'd:right_' + doc_uri.split(':').join('_') + '_' + position_uri.split(':').join('_') + '_event2';
              addPermission(permission_uri, position_uri, doc_uri, ['v-s:canRead', 'v-s:canUpdate', 'v-s:canDelete']);
            }
            const person_uri = veda.Util.getUri(owner['v-s:employee']);
            if (person_uri) {
              const permission_uri = 'd:right_' + doc_uri.split(':').join('_') + '_' + person_uri.split(':').join('_') + '_event2';
              addPermission(permission_uri, person_uri, doc_uri, ['v-s:canRead', 'v-s:canUpdate', 'v-s:canDelete']);
            }
          }
        }
      }
    });
  }
});

function addPermission (permission_uri, subject_uri, object_uri, rights) {
  const permission = {
    '@': permission_uri,
    'rdf:type': veda.Util.newUri('v-s:PermissionStatement'),
    'v-s:permissionObject': veda.Util.newUri(object_uri),
    'v-s:permissionSubject': veda.Util.newUri(subject_uri),
  };
  rights.map(function (right) {
    permission[right] = veda.Util.newBool(true);
  });
  put_individual(ticket, permission);
}
  """ ;
.

