use crate::common::{log_err_and_to_tg, TelegramDest};
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs;
use std::path::Path;
use std::time::{Duration, Instant};
use sysinfo::{ProcessExt, SystemExt};
use v_queue::consumer::Consumer;
use v_queue::queue::Queue;
use v_queue::record::Mode;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –º–æ–¥—É–ª–µ–π
pub struct QueueChecker {
    queue_base_path: String,
    stats_file_path: String,
    queue_stats: HashMap<String, QueueStats>,
    last_check_times: HashMap<String, Instant>,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥—É–ª—è
#[derive(Debug, Default, Serialize, Deserialize)]
pub struct QueueStats {
    pub prev_pushed: Option<u32>,
    pub prev_popped: Option<u32>,
    pub last_updated: Option<DateTime<Utc>>,
    pub queue_part_id: Option<u32>,
    pub consumer_part_id: Option<u32>,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
pub struct QueueStatus {
    pub current_pushed: u32,
    pub current_popped: u32,
    pub queue_part_id: u32,
    pub consumer_part_id: u32,
    pub prev_pushed: Option<u32>,
    pub prev_popped: Option<u32>,
    pub prev_queue_part_id: Option<u32>,
    pub prev_consumer_part_id: Option<u32>,
}

impl QueueChecker {
    pub fn new(queue_base_path: String, stats_file_path: String) -> Self {
        let mut checker = Self { 
            queue_base_path,
            stats_file_path,
            queue_stats: HashMap::new(),
            last_check_times: HashMap::new(),
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        checker.load_stats();
        checker
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    fn load_stats(&mut self) {
        if Path::new(&self.stats_file_path).exists() {
            match fs::read_to_string(&self.stats_file_path) {
                Ok(content) => {
                    match serde_json::from_str::<HashMap<String, QueueStats>>(&content) {
                        Ok(stats) => {
                            self.queue_stats = stats;
                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
                        },
                        Err(e) => {
                            error!("Failed to parse queue statistics: {:?}", e);
                        }
                    }
                },
                Err(e) => {
                    error!("Failed to read statistics file {}: {:?}", self.stats_file_path, e);
                }
            }
        }
        // –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
    fn save_stats(&self) {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if let Some(parent) = Path::new(&self.stats_file_path).parent() {
            if let Err(e) = fs::create_dir_all(parent) {
                error!("Failed to create directory {:?}: {:?}", parent, e);
                return;
            }
        }

        match serde_json::to_string_pretty(&self.queue_stats) {
            Ok(content) => {
                if let Err(e) = fs::write(&self.stats_file_path, content) {
                    error!("Failed to write queue statistics to file {}: {:?}", self.stats_file_path, e);
                }
            },
            Err(e) => {
                error!("Failed to serialize queue statistics: {:?}", e);
            }
        }
    }


    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–∏—Å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
    // –ú–æ–¥—É–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–∏—Å—à–∏–º –µ—Å–ª–∏:
    // 1. –ü—Ä–æ—Ü–µ—Å—Å –∂–∏–≤ (—Å—Ç–∞—Ç—É—Å Run –∏–ª–∏ Sleep)
    // 2. –í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (pushed —É–≤–µ–ª–∏—á–∏–ª—Å—è)
    // 3. –ú–æ–¥—É–ª—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (popped –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
    pub async fn check_module_stuck(
        module: &crate::common::VedaModule,
        process_id: u32,
        sys: &mut sysinfo::System,
        queue_status: Option<QueueStatus>,
        tg_dest: &Option<TelegramDest>,
    ) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
        if !module.queue_check_enabled {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        let queue_status = match queue_status {
            Some(status) => status,
            None => return false, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
        if let Some(proc) = sys.get_process(process_id as i32) {
            match proc.status() {
                sysinfo::ProcessStatus::Run | sysinfo::ProcessStatus::Sleep => {
                    // –ü—Ä–æ—Ü–µ—Å—Å –∂–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                },
                _ => {
                    // –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    return false;
                }
            }
        } else {
            // –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if let (Some(prev_pushed), Some(prev_popped), Some(prev_queue_part), Some(prev_consumer_part)) = 
            (queue_status.prev_pushed, queue_status.prev_popped, queue_status.prev_queue_part_id, queue_status.prev_consumer_part_id) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Ç–æ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–æ—Ä–º–∞–ª–µ–Ω)
            if prev_queue_part == queue_status.queue_part_id && prev_consumer_part == queue_status.consumer_part_id {
                let pushed_diff = queue_status.current_pushed.saturating_sub(prev_pushed);
                let popped_diff = queue_status.current_popped.saturating_sub(prev_popped);

                // –ú–æ–¥—É–ª—å –∑–∞–≤–∏—Å –µ—Å–ª–∏:
                // 1. –í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (pushed_diff > 0)
                // 2. –ú–æ–¥—É–ª—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (popped_diff == 0)
                if pushed_diff > 0 && popped_diff == 0 {
                    let current_queue_size = queue_status.current_pushed.saturating_sub(queue_status.current_popped);
                    
                    warn!(
                        "–ú–æ–¥—É–ª—å {} (PID: {}, part {}/{}) may be stuck! For period: added +{}, processed +0, queue size: {}",
                        module.alias_name, process_id, queue_status.queue_part_id, queue_status.consumer_part_id, pushed_diff, current_queue_size
                    );

                    if let Some(tg) = tg_dest {
                        log_err_and_to_tg(&Some(tg.clone()), &format!(
                            "üö® Module {} (PID: {}) stuck! Added: +{}, processed: 0, queue size: {}",
                            module.alias_name, process_id, pushed_diff, current_queue_size
                        )).await;
                    }

                    return true;
                }
            }
        }

        false
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    pub async fn check_single_module_queue_status(
        &mut self,
        module: &crate::common::VedaModule,
        tg_dest: &Option<TelegramDest>,
    ) -> Option<QueueStatus> {
        if !module.queue_check_enabled {
            return None;
        }

        let mut stats_changed = false;
        let now = Instant::now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–µ–π—á–∞—Å
        let should_check = if let Some(period) = module.queue_check_period {
            if let Some(last_check) = self.last_check_times.get(&module.alias_name) {
                now.duration_since(*last_check) >= period
            } else {
                true // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            }
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 5 –º–∏–Ω—É—Ç
            if let Some(last_check) = self.last_check_times.get(&module.alias_name) {
                now.duration_since(*last_check) >= Duration::from_secs(300)
            } else {
                true
            }
        };

        if !should_check {
            return None;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_check_times.insert(module.alias_name.clone(), now);

        let queue_name = format!("individuals-flow-{}", module.alias_name);
        let consumer_name = format!("{}-bootstrap-queue-checker", module.alias_name);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        match Queue::new(&self.queue_base_path, &queue_name, Mode::Read) {
            Ok(queue) => {
                let current_pushed = queue.count_pushed;
                let queue_part_id = queue.id;
                
                // –°–æ–∑–¥–∞–µ–º consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è count_popped
                match Consumer::new(&self.queue_base_path, &consumer_name, &queue_name) {
                    Ok(consumer) => {
                        let current_popped = consumer.count_popped;
                        let consumer_part_id = consumer.id;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–¥—É–ª—è
                        let stats = self.queue_stats.entry(module.alias_name.clone()).or_insert_with(QueueStats::default);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                        let prev_pushed = stats.prev_pushed;
                        let prev_popped = stats.prev_popped;
                        let prev_queue_part_id = stats.queue_part_id;
                        let prev_consumer_part_id = stats.consumer_part_id;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ part ID —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        let part_ids_changed = stats.queue_part_id != Some(queue_part_id) || 
                                             stats.consumer_part_id != Some(consumer_part_id);
                        
                        if let (Some(prev_pushed), Some(prev_popped)) = (stats.prev_pushed, stats.prev_popped) {
                            if part_ids_changed {
                                // –ï—Å–ª–∏ part ID –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                                // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—Å–∏–ª–∏—Å—å
                                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö
                            } else {
                                // Part ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                                let pushed_diff = current_pushed.saturating_sub(prev_pushed);
                                let popped_diff = current_popped.saturating_sub(prev_popped);
                                let queue_growth = pushed_diff.saturating_sub(popped_diff);
                                
                                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Ç–µ—Ç
                                if queue_growth > 0 {
                                    let current_queue_size = current_pushed.saturating_sub(current_popped);
                                    warn!(
                                        "Queue of module {} (part {}/{}) growing! Current size: {}, growth for period: +{}",
                                        module.alias_name, queue_part_id, consumer_part_id, current_queue_size, queue_growth
                                    );
                                    
                                    if let Some(tg) = tg_dest {
                                        log_err_and_to_tg(&Some(tg.clone()), &format!(
                                            "‚ö†Ô∏è Queue of module {} (part {}/{}) growing! Size: {}, growth: +{}",
                                            module.alias_name, queue_part_id, consumer_part_id, current_queue_size, queue_growth
                                        )).await;
                                    }
                                }
                            }
                        } else {
                            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                        if stats.prev_pushed != Some(current_pushed) || 
                           stats.prev_popped != Some(current_popped) ||
                           stats.queue_part_id != Some(queue_part_id) ||
                           stats.consumer_part_id != Some(consumer_part_id) {
                            stats.prev_pushed = Some(current_pushed);
                            stats.prev_popped = Some(current_popped);
                            stats.queue_part_id = Some(queue_part_id);
                            stats.consumer_part_id = Some(consumer_part_id);
                            stats.last_updated = Some(Utc::now());
                            stats_changed = true;
                        }

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                        if stats_changed {
                            self.save_stats();
                        }

                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
                        return Some(QueueStatus {
                            current_pushed,
                            current_popped,
                            queue_part_id,
                            consumer_part_id,
                            prev_pushed,
                            prev_popped,
                            prev_queue_part_id,
                            prev_consumer_part_id,
                        });
                    },
                    Err(e) => {
                        error!("Failed to create consumer for queue {}: {:?}", queue_name, e);
                    }
                }
            },
            Err(e) => {
                error!("Failed to connect to queue {}: {:?}", queue_name, e);
            }
        }

        None
    }
}
