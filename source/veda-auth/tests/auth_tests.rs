use veda_auth::*;
use v_individual_model::onto::individual::Individual;
use v_individual_model::onto::datatype::Lang;
use v_common::module::ticket::Ticket;
use v_storage::{VStorage};
use v_common::v_api::common_type::ResultCode;
use chrono::Utc;

#[test]
fn test_auth_workplace_struct_fields() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AuthConf –∏ UserStat –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
    let conf = AuthConf::default();
    let mut user_stat = UserStat::default();
    let mut credential = Individual::default();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let login = "test_user";
    let password = "test_password";
    let ip = "127.0.0.1";
    let secret = "";
    let sys_ticket = "test_ticket";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—è
    assert_eq!(conf.failed_auth_attempts, 2);
    assert_eq!(user_stat.wrong_count_login, 0);
    assert_eq!(login, "test_user");
    assert_eq!(password, "test_password");
    assert_eq!(ip, "127.0.0.1");
    assert_eq!(secret, "");
    assert_eq!(sys_ticket, "test_ticket");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–ª—è
    user_stat.wrong_count_login = 5;
    assert_eq!(user_stat.wrong_count_login, 5);
    
    credential.set_id("test_credential");
    assert_eq!(credential.get_id(), "test_credential");
}

#[test]
fn test_password_hashing_consistency() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–ª—è–º–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö–µ—à–∏
    let mut credential1 = Individual::default();
    let mut credential2 = Individual::default();
    
    let password = "TestPassword123!";
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–≤–∞–∂–¥—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–∞—Ä–æ–ª—è
    veda_auth::set_password(&mut credential1, password);
    veda_auth::set_password(&mut credential2, password);
    
    let hash1 = credential1.get_first_literal("v-s:password").unwrap();
    let hash2 = credential2.get_first_literal("v-s:password").unwrap();
    let salt1 = credential1.get_first_literal("v-s:salt").unwrap();
    let salt2 = credential2.get_first_literal("v-s:salt").unwrap();
    
    // –î–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–æ–ª–∏ –∏ —Ö–µ—à–∏
    assert_ne!(hash1, hash2);
    assert_ne!(salt1, salt2);
    
    // –ù–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
    assert_eq!(hash1.len(), hash2.len());
    assert_eq!(salt1.len(), salt2.len());
}

#[test]
fn test_empty_password_handling() {
    let mut credential = Individual::default();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º
    veda_auth::set_password(&mut credential, "");
    
    let stored_password = credential.get_first_literal("v-s:password");
    
    // –î–∞–∂–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —Ö–µ—à
    assert!(stored_password.is_some());
    let stored_password = stored_password.unwrap();
    assert!(!stored_password.is_empty());
}

#[test]
fn test_special_characters_in_password() {
    let mut credential = Individual::default();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    let password = "!@#$%^&*()_+-=[]{}|;':\",./<>?`~";
    veda_auth::set_password(&mut credential, password);
    
    let stored_password = credential.get_first_literal("v-s:password");
    let stored_salt = credential.get_first_literal("v-s:salt");
    
    assert!(stored_password.is_some());
    assert!(stored_salt.is_some());
    
    let stored_password = stored_password.unwrap();
    let stored_salt = stored_salt.unwrap();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ—à –∏ —Å–æ–ª—å —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    assert_eq!(stored_password.len(), 128);
    assert_eq!(stored_salt.len(), 128);
    assert!(stored_password.chars().all(|c| c.is_ascii_hexdigit()));
    assert!(stored_salt.chars().all(|c| c.is_ascii_hexdigit()));
}

#[test]
fn test_unicode_password_handling() {
    let mut credential = Individual::default();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º Unicode —Å–∏–º–≤–æ–ª—ã
    let password = "–ü–∞—Ä–æ–ª—å123—Ñ—ë—ëüîíüõ°Ô∏è";
    veda_auth::set_password(&mut credential, password);
    
    let stored_password = credential.get_first_literal("v-s:password");
    let stored_salt = credential.get_first_literal("v-s:salt");
    
    assert!(stored_password.is_some());
    assert!(stored_salt.is_some());
    
    let stored_password = stored_password.unwrap();
    let stored_salt = stored_salt.unwrap();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ—à –∏ —Å–æ–ª—å —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–∞–∂–µ –¥–ª—è Unicode
    assert_eq!(stored_password.len(), 128);
    assert_eq!(stored_salt.len(), 128);
    assert!(stored_password.chars().all(|c| c.is_ascii_hexdigit()));
    assert!(stored_salt.chars().all(|c| c.is_ascii_hexdigit()));
}

#[test]
fn test_very_long_password() {
    let mut credential = Individual::default();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    let password = "A".repeat(1000); // 1000 —Å–∏–º–≤–æ–ª–æ–≤
    veda_auth::set_password(&mut credential, &password);
    
    let stored_password = credential.get_first_literal("v-s:password");
    let stored_salt = credential.get_first_literal("v-s:salt");
    
    assert!(stored_password.is_some());
    assert!(stored_salt.is_some());
    
    let stored_password = stored_password.unwrap();
    let stored_salt = stored_salt.unwrap();
    
    // –î–ª–∏–Ω–∞ —Ö–µ—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    assert_eq!(stored_password.len(), 128);
    assert_eq!(stored_salt.len(), 128);
}

#[test]
fn test_ticket_creation_with_different_durations() {
    let storage_box = VStorage::builder()
        .memory()
        .build()
        .expect("Failed to create memory storage");
    let mut storage = VStorage::new(storage_box);
    
    let login = "test_user";
    let user_id = "test:user123";
    let addr = "127.0.0.1";
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let durations = vec![60, 3600, 86400, 604800]; // 1 –º–∏–Ω, 1 —á–∞—Å, 1 –¥–µ–Ω—å, 1 –Ω–µ–¥–µ–ª—è
    
    for duration in durations {
        let mut ticket = Ticket::default();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        veda_auth::create_new_ticket(login, user_id, addr, duration, &mut ticket, &mut storage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        let actual_duration = (ticket.end_time - ticket.start_time) / 10_000_000;
        assert_eq!(actual_duration, duration);
        assert_eq!(ticket.result, ResultCode::Ok);
    }
}

#[test]
fn test_ticket_creation_with_different_ip_addresses() {
    let storage_box = VStorage::builder()
        .memory()
        .build()
        .expect("Failed to create memory storage");
    let mut storage = VStorage::new(storage_box);
    
    let login = "test_user";
    let user_id = "test:user123";
    let duration = 3600;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    let valid_ips = vec![
        "127.0.0.1",
        "192.168.1.1",
        "10.0.0.1",
        "172.16.0.1",
        "8.8.8.8",
        "::1",
        "2001:db8::1",
    ];
    
    for ip in valid_ips {
        let mut ticket = Ticket::default();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        veda_auth::create_new_ticket(login, user_id, ip, duration, &mut ticket, &mut storage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–ª–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        assert_eq!(ticket.result, ResultCode::Ok);
        assert_eq!(ticket.user_addr, ip);
        assert!(!ticket.id.is_empty());
    }
}

#[test]
fn test_ticket_creation_with_invalid_ip_addresses() {
    let storage_box = VStorage::builder()
        .memory()
        .build()
        .expect("Failed to create memory storage");
    let mut storage = VStorage::new(storage_box);
    
    let login = "test_user";
    let user_id = "test:user123";
    let duration = 3600;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    let invalid_ips = vec![
        "999.999.999.999",
        "not_an_ip",
        "192.168.1",
        "192.168.1.1.1",
        "",
        "localhost",
        "300.300.300.300",
    ];
    
    for ip in invalid_ips {
        let mut ticket = Ticket::default();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        veda_auth::create_new_ticket(login, user_id, ip, duration, &mut ticket, &mut storage);
        
        // –ë–∏–ª–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ IP
        assert!(ticket.id.is_empty());
    }
}

#[test]
fn test_constants_values() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–µ—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert_eq!(veda_auth::N_ITER, 100_000);
    assert_eq!(veda_auth::TICKS_TO_UNIX_EPOCH, 62_135_596_800_000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Å—Ç–æ–π SHA256 —Ö–µ—à –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    let empty_hash = veda_auth::EMPTY_SHA256_HASH;
    assert_eq!(empty_hash.len(), 64);
    assert!(empty_hash.chars().all(|c| c.is_ascii_hexdigit()));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    let trusted_group = veda_auth::ALLOW_TRUSTED_GROUP;
    assert!(trusted_group.starts_with("cfg:"));
    assert!(trusted_group.contains("Trusted"));
}

#[test]
fn test_auth_configuration_ranges() {
    let conf = AuthConf::default();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    assert!(conf.failed_auth_attempts > 0);
    assert!(conf.failed_auth_attempts < 100);
    
    assert!(conf.failed_change_pass_attempts > 0);
    assert!(conf.failed_change_pass_attempts < 100);
    
    assert!(conf.failed_auth_lock_period > 0);
    assert!(conf.failed_auth_lock_period < 86400 * 7); // –ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏
    
    assert!(conf.ticket_lifetime > 0);
    assert!(conf.ticket_lifetime < 86400 * 30); // –ú–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞
    
    assert!(conf.pass_lifetime > 0);
    assert!(conf.pass_lifetime < 86400 * 365); // –ú–µ–Ω—å—à–µ –≥–æ–¥–∞
}

#[test]
fn test_user_stat_field_types() {
    let mut user_stat = UserStat::default();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–ª—è
    user_stat.wrong_count_login = 5;
    user_stat.last_wrong_login_date = Utc::now().timestamp();
    user_stat.attempt_change_pass = 3;
    user_stat.last_attempt_change_pass_date = Utc::now().timestamp();
    
    assert_eq!(user_stat.wrong_count_login, 5);
    assert!(user_stat.last_wrong_login_date > 0);
    assert_eq!(user_stat.attempt_change_pass, 3);
    assert!(user_stat.last_attempt_change_pass_date > 0);
}

#[test]
fn test_duration_param_edge_cases() {
    let mut individual = Individual::default();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    individual.set_string("zero_duration", "0s", Lang::none());
    individual.set_string("negative_duration", "-1h", Lang::none());
    individual.set_string("fractional_duration", "0.5h", Lang::none());
    individual.set_string("very_large_duration", "1000d", Lang::none());
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    let zero_duration = veda_auth::read_duration_param(&mut individual, "zero_duration");
    let negative_duration = veda_auth::read_duration_param(&mut individual, "negative_duration");
    let fractional_duration = veda_auth::read_duration_param(&mut individual, "fractional_duration");
    let very_large_duration = veda_auth::read_duration_param(&mut individual, "very_large_duration");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert_eq!(zero_duration.unwrap().as_secs(), 0);
    assert!(negative_duration.is_none()); // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã
    assert_eq!(fractional_duration.unwrap().as_secs(), 1800); // 0.5 —á–∞—Å–∞ = 30 –º–∏–Ω—É—Ç
    assert_eq!(very_large_duration.unwrap().as_secs(), 86400 * 1000); // 1000 –¥–Ω–µ–π
} 